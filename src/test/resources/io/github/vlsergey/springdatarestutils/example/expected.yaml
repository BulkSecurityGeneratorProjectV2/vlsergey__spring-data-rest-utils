---
components:
  schemas:
    Group:
      properties:
        groupId:
          format: "uuid"
          type: "string"
        title:
          type: "string"
      type: "object"
    GroupWithLinks:
      allOf:
      - $ref: "#/components/schemas/Group"
      - properties:
          _links:
            properties:
              group:
                $ref: "#/components/schemas/LinkType"
              self:
                $ref: "#/components/schemas/LinkType"
            type: "object"
        required:
        - "_links"
        type: "object"
    LinkType:
      properties:
        deprecation:
          type: "string"
        href:
          type: "string"
        hreflang:
          type: "string"
        media:
          type: "string"
        name:
          type: "string"
        profile:
          type: "string"
        rel:
          type: "string"
        template:
          $ref: "#/components/schemas/UriTemplate"
        templated:
          nullable: false
          type: "boolean"
        title:
          type: "string"
        type:
          type: "string"
      required:
      - "templated"
      type: "object"
    Student:
      properties:
        studentId:
          format: "uuid"
          type: "string"
      type: "object"
    StudentWithLinks:
      allOf:
      - $ref: "#/components/schemas/Student"
      - properties:
          _links:
            properties:
              group:
                $ref: "#/components/schemas/LinkType"
              self:
                $ref: "#/components/schemas/LinkType"
              student:
                $ref: "#/components/schemas/LinkType"
            type: "object"
        required:
        - "_links"
        type: "object"
    UriTemplate:
      type: "object"
info:
  description: "This is automatically generated OpenAPI Specification for Spring Data\
    \ REST entities and repositories"
  title: "ToOpenApiActionImplTest Spring Data REST OpenAPI Specification"
  version: "0.0.1-SNAPSHOT"
openapi: "3.0.1"
paths:
  /groups:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupWithLinks"
          description: "Entity has been created"
        "204":
          description: "Entity has been created"
      tags:
      - "Group"
  /groups/{id}:
    delete:
      description: "Deletes the entity with the given id"
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      responses:
        "204":
          description: "Entity has been deleted or already didn't exists"
      tags:
      - "Group"
    get:
      description: "Retrieves an entity by its id"
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupWithLinks"
          description: "Entity is present"
        "404":
          description: "Entity is missing"
      tags:
      - "Group"
    put:
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "204":
          description: "Entity has been updated"
      tags:
      - "Group"
  /students:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentWithLinks"
          description: "Entity has been created"
        "204":
          description: "Entity has been created"
      tags:
      - "Student"
  /students/{id}:
    delete:
      description: "Deletes the entity with the given id"
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      responses:
        "204":
          description: "Entity has been deleted or already didn't exists"
      tags:
      - "Student"
    get:
      description: "Retrieves an entity by its id"
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentWithLinks"
          description: "Entity is present"
        "404":
          description: "Entity is missing"
      tags:
      - "Student"
    put:
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "204":
          description: "Entity has been updated"
      tags:
      - "Student"
  /students/{id}/group:
    get:
      parameters:
      - description: "Entity ID"
        in: "path"
        name: "id"
        required: true
        schema:
          format: "uuid"
          type: "string"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupWithLinks"
          description: "Entity is present"
        "404":
          description: "Entity is missing"
      tags:
      - "Student"
servers:
- url: "/api"
